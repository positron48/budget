// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.7
// 	protoc        (unknown)
// source: budget/v1/import.proto

package budgetv1

import (
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"

	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type StartCsvImportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Filename      string                 `protobuf:"bytes,1,opt,name=filename,proto3" json:"filename,omitempty"`
	Delimiter     string                 `protobuf:"bytes,2,opt,name=delimiter,proto3" json:"delimiter,omitempty"` // default ","
	Quote         string                 `protobuf:"bytes,3,opt,name=quote,proto3" json:"quote,omitempty"`         // default '"'
	Encoding      string                 `protobuf:"bytes,4,opt,name=encoding,proto3" json:"encoding,omitempty"`   // default "utf-8"
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartCsvImportRequest) Reset() {
	*x = StartCsvImportRequest{}
	mi := &file_budget_v1_import_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartCsvImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCsvImportRequest) ProtoMessage() {}

func (x *StartCsvImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCsvImportRequest.ProtoReflect.Descriptor instead.
func (*StartCsvImportRequest) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{0}
}

func (x *StartCsvImportRequest) GetFilename() string {
	if x != nil {
		return x.Filename
	}
	return ""
}

func (x *StartCsvImportRequest) GetDelimiter() string {
	if x != nil {
		return x.Delimiter
	}
	return ""
}

func (x *StartCsvImportRequest) GetQuote() string {
	if x != nil {
		return x.Quote
	}
	return ""
}

func (x *StartCsvImportRequest) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

type StartCsvImportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImportId      string                 `protobuf:"bytes,1,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *StartCsvImportResponse) Reset() {
	*x = StartCsvImportResponse{}
	mi := &file_budget_v1_import_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StartCsvImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StartCsvImportResponse) ProtoMessage() {}

func (x *StartCsvImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StartCsvImportResponse.ProtoReflect.Descriptor instead.
func (*StartCsvImportResponse) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{1}
}

func (x *StartCsvImportResponse) GetImportId() string {
	if x != nil {
		return x.ImportId
	}
	return ""
}

type UploadCsvChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImportId      string                 `protobuf:"bytes,1,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	Chunk         []byte                 `protobuf:"bytes,2,opt,name=chunk,proto3" json:"chunk,omitempty"`
	Last          bool                   `protobuf:"varint,3,opt,name=last,proto3" json:"last,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadCsvChunkRequest) Reset() {
	*x = UploadCsvChunkRequest{}
	mi := &file_budget_v1_import_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadCsvChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCsvChunkRequest) ProtoMessage() {}

func (x *UploadCsvChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCsvChunkRequest.ProtoReflect.Descriptor instead.
func (*UploadCsvChunkRequest) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{2}
}

func (x *UploadCsvChunkRequest) GetImportId() string {
	if x != nil {
		return x.ImportId
	}
	return ""
}

func (x *UploadCsvChunkRequest) GetChunk() []byte {
	if x != nil {
		return x.Chunk
	}
	return nil
}

func (x *UploadCsvChunkRequest) GetLast() bool {
	if x != nil {
		return x.Last
	}
	return false
}

type UploadCsvChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ReceivedBytes int64                  `protobuf:"varint,1,opt,name=received_bytes,json=receivedBytes,proto3" json:"received_bytes,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UploadCsvChunkResponse) Reset() {
	*x = UploadCsvChunkResponse{}
	mi := &file_budget_v1_import_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UploadCsvChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UploadCsvChunkResponse) ProtoMessage() {}

func (x *UploadCsvChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UploadCsvChunkResponse.ProtoReflect.Descriptor instead.
func (*UploadCsvChunkResponse) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{3}
}

func (x *UploadCsvChunkResponse) GetReceivedBytes() int64 {
	if x != nil {
		return x.ReceivedBytes
	}
	return 0
}

type CsvColumnMapping struct {
	state              protoimpl.MessageState `protogen:"open.v1"`
	DateColumn         string                 `protobuf:"bytes,1,opt,name=date_column,json=dateColumn,proto3" json:"date_column,omitempty"`
	AmountColumn       string                 `protobuf:"bytes,2,opt,name=amount_column,json=amountColumn,proto3" json:"amount_column,omitempty"`
	CurrencyCodeColumn string                 `protobuf:"bytes,3,opt,name=currency_code_column,json=currencyCodeColumn,proto3" json:"currency_code_column,omitempty"` // optional
	TypeColumn         string                 `protobuf:"bytes,4,opt,name=type_column,json=typeColumn,proto3" json:"type_column,omitempty"`                           // income/expense or signed amounts
	CategoryColumn     string                 `protobuf:"bytes,5,opt,name=category_column,json=categoryColumn,proto3" json:"category_column,omitempty"`               // to map names â†’ category_ids
	CommentColumn      string                 `protobuf:"bytes,6,opt,name=comment_column,json=commentColumn,proto3" json:"comment_column,omitempty"`
	unknownFields      protoimpl.UnknownFields
	sizeCache          protoimpl.SizeCache
}

func (x *CsvColumnMapping) Reset() {
	*x = CsvColumnMapping{}
	mi := &file_budget_v1_import_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CsvColumnMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CsvColumnMapping) ProtoMessage() {}

func (x *CsvColumnMapping) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CsvColumnMapping.ProtoReflect.Descriptor instead.
func (*CsvColumnMapping) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{4}
}

func (x *CsvColumnMapping) GetDateColumn() string {
	if x != nil {
		return x.DateColumn
	}
	return ""
}

func (x *CsvColumnMapping) GetAmountColumn() string {
	if x != nil {
		return x.AmountColumn
	}
	return ""
}

func (x *CsvColumnMapping) GetCurrencyCodeColumn() string {
	if x != nil {
		return x.CurrencyCodeColumn
	}
	return ""
}

func (x *CsvColumnMapping) GetTypeColumn() string {
	if x != nil {
		return x.TypeColumn
	}
	return ""
}

func (x *CsvColumnMapping) GetCategoryColumn() string {
	if x != nil {
		return x.CategoryColumn
	}
	return ""
}

func (x *CsvColumnMapping) GetCommentColumn() string {
	if x != nil {
		return x.CommentColumn
	}
	return ""
}

type ConfigureCsvMappingRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImportId      string                 `protobuf:"bytes,1,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	Mapping       *CsvColumnMapping      `protobuf:"bytes,2,opt,name=mapping,proto3" json:"mapping,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureCsvMappingRequest) Reset() {
	*x = ConfigureCsvMappingRequest{}
	mi := &file_budget_v1_import_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureCsvMappingRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureCsvMappingRequest) ProtoMessage() {}

func (x *ConfigureCsvMappingRequest) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureCsvMappingRequest.ProtoReflect.Descriptor instead.
func (*ConfigureCsvMappingRequest) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigureCsvMappingRequest) GetImportId() string {
	if x != nil {
		return x.ImportId
	}
	return ""
}

func (x *ConfigureCsvMappingRequest) GetMapping() *CsvColumnMapping {
	if x != nil {
		return x.Mapping
	}
	return nil
}

type ConfigureCsvMappingResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConfigureCsvMappingResponse) Reset() {
	*x = ConfigureCsvMappingResponse{}
	mi := &file_budget_v1_import_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConfigureCsvMappingResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigureCsvMappingResponse) ProtoMessage() {}

func (x *ConfigureCsvMappingResponse) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigureCsvMappingResponse.ProtoReflect.Descriptor instead.
func (*ConfigureCsvMappingResponse) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{6}
}

type PreviewCsvImportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImportId      string                 `protobuf:"bytes,1,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	Limit         int32                  `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreviewCsvImportRequest) Reset() {
	*x = PreviewCsvImportRequest{}
	mi := &file_budget_v1_import_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewCsvImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewCsvImportRequest) ProtoMessage() {}

func (x *PreviewCsvImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewCsvImportRequest.ProtoReflect.Descriptor instead.
func (*PreviewCsvImportRequest) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{7}
}

func (x *PreviewCsvImportRequest) GetImportId() string {
	if x != nil {
		return x.ImportId
	}
	return ""
}

func (x *PreviewCsvImportRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

type PreviewCsvImportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	TotalRows     int32                  `protobuf:"varint,1,opt,name=total_rows,json=totalRows,proto3" json:"total_rows,omitempty"`
	ValidRows     int32                  `protobuf:"varint,2,opt,name=valid_rows,json=validRows,proto3" json:"valid_rows,omitempty"`
	InvalidRows   int32                  `protobuf:"varint,3,opt,name=invalid_rows,json=invalidRows,proto3" json:"invalid_rows,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PreviewCsvImportResponse) Reset() {
	*x = PreviewCsvImportResponse{}
	mi := &file_budget_v1_import_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PreviewCsvImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PreviewCsvImportResponse) ProtoMessage() {}

func (x *PreviewCsvImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PreviewCsvImportResponse.ProtoReflect.Descriptor instead.
func (*PreviewCsvImportResponse) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{8}
}

func (x *PreviewCsvImportResponse) GetTotalRows() int32 {
	if x != nil {
		return x.TotalRows
	}
	return 0
}

func (x *PreviewCsvImportResponse) GetValidRows() int32 {
	if x != nil {
		return x.ValidRows
	}
	return 0
}

func (x *PreviewCsvImportResponse) GetInvalidRows() int32 {
	if x != nil {
		return x.InvalidRows
	}
	return 0
}

type CommitCsvImportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	ImportId      string                 `protobuf:"bytes,1,opt,name=import_id,json=importId,proto3" json:"import_id,omitempty"`
	DryRun        bool                   `protobuf:"varint,2,opt,name=dry_run,json=dryRun,proto3" json:"dry_run,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitCsvImportRequest) Reset() {
	*x = CommitCsvImportRequest{}
	mi := &file_budget_v1_import_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitCsvImportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCsvImportRequest) ProtoMessage() {}

func (x *CommitCsvImportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCsvImportRequest.ProtoReflect.Descriptor instead.
func (*CommitCsvImportRequest) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{9}
}

func (x *CommitCsvImportRequest) GetImportId() string {
	if x != nil {
		return x.ImportId
	}
	return ""
}

func (x *CommitCsvImportRequest) GetDryRun() bool {
	if x != nil {
		return x.DryRun
	}
	return false
}

type CommitCsvImportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Inserted      int32                  `protobuf:"varint,1,opt,name=inserted,proto3" json:"inserted,omitempty"`
	Failed        int32                  `protobuf:"varint,2,opt,name=failed,proto3" json:"failed,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CommitCsvImportResponse) Reset() {
	*x = CommitCsvImportResponse{}
	mi := &file_budget_v1_import_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CommitCsvImportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommitCsvImportResponse) ProtoMessage() {}

func (x *CommitCsvImportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_budget_v1_import_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommitCsvImportResponse.ProtoReflect.Descriptor instead.
func (*CommitCsvImportResponse) Descriptor() ([]byte, []int) {
	return file_budget_v1_import_proto_rawDescGZIP(), []int{10}
}

func (x *CommitCsvImportResponse) GetInserted() int32 {
	if x != nil {
		return x.Inserted
	}
	return 0
}

func (x *CommitCsvImportResponse) GetFailed() int32 {
	if x != nil {
		return x.Failed
	}
	return 0
}

var File_budget_v1_import_proto protoreflect.FileDescriptor

const file_budget_v1_import_proto_rawDesc = "" +
	"\n" +
	"\x16budget/v1/import.proto\x12\tbudget.v1\"\x83\x01\n" +
	"\x15StartCsvImportRequest\x12\x1a\n" +
	"\bfilename\x18\x01 \x01(\tR\bfilename\x12\x1c\n" +
	"\tdelimiter\x18\x02 \x01(\tR\tdelimiter\x12\x14\n" +
	"\x05quote\x18\x03 \x01(\tR\x05quote\x12\x1a\n" +
	"\bencoding\x18\x04 \x01(\tR\bencoding\"5\n" +
	"\x16StartCsvImportResponse\x12\x1b\n" +
	"\timport_id\x18\x01 \x01(\tR\bimportId\"^\n" +
	"\x15UploadCsvChunkRequest\x12\x1b\n" +
	"\timport_id\x18\x01 \x01(\tR\bimportId\x12\x14\n" +
	"\x05chunk\x18\x02 \x01(\fR\x05chunk\x12\x12\n" +
	"\x04last\x18\x03 \x01(\bR\x04last\"?\n" +
	"\x16UploadCsvChunkResponse\x12%\n" +
	"\x0ereceived_bytes\x18\x01 \x01(\x03R\rreceivedBytes\"\xfb\x01\n" +
	"\x10CsvColumnMapping\x12\x1f\n" +
	"\vdate_column\x18\x01 \x01(\tR\n" +
	"dateColumn\x12#\n" +
	"\ramount_column\x18\x02 \x01(\tR\famountColumn\x120\n" +
	"\x14currency_code_column\x18\x03 \x01(\tR\x12currencyCodeColumn\x12\x1f\n" +
	"\vtype_column\x18\x04 \x01(\tR\n" +
	"typeColumn\x12'\n" +
	"\x0fcategory_column\x18\x05 \x01(\tR\x0ecategoryColumn\x12%\n" +
	"\x0ecomment_column\x18\x06 \x01(\tR\rcommentColumn\"p\n" +
	"\x1aConfigureCsvMappingRequest\x12\x1b\n" +
	"\timport_id\x18\x01 \x01(\tR\bimportId\x125\n" +
	"\amapping\x18\x02 \x01(\v2\x1b.budget.v1.CsvColumnMappingR\amapping\"\x1d\n" +
	"\x1bConfigureCsvMappingResponse\"L\n" +
	"\x17PreviewCsvImportRequest\x12\x1b\n" +
	"\timport_id\x18\x01 \x01(\tR\bimportId\x12\x14\n" +
	"\x05limit\x18\x02 \x01(\x05R\x05limit\"{\n" +
	"\x18PreviewCsvImportResponse\x12\x1d\n" +
	"\n" +
	"total_rows\x18\x01 \x01(\x05R\ttotalRows\x12\x1d\n" +
	"\n" +
	"valid_rows\x18\x02 \x01(\x05R\tvalidRows\x12!\n" +
	"\finvalid_rows\x18\x03 \x01(\x05R\vinvalidRows\"N\n" +
	"\x16CommitCsvImportRequest\x12\x1b\n" +
	"\timport_id\x18\x01 \x01(\tR\bimportId\x12\x17\n" +
	"\adry_run\x18\x02 \x01(\bR\x06dryRun\"M\n" +
	"\x17CommitCsvImportResponse\x12\x1a\n" +
	"\binserted\x18\x01 \x01(\x05R\binserted\x12\x16\n" +
	"\x06failed\x18\x02 \x01(\x05R\x06failed2\xda\x03\n" +
	"\rImportService\x12U\n" +
	"\x0eStartCsvImport\x12 .budget.v1.StartCsvImportRequest\x1a!.budget.v1.StartCsvImportResponse\x12U\n" +
	"\x0eUploadCsvChunk\x12 .budget.v1.UploadCsvChunkRequest\x1a!.budget.v1.UploadCsvChunkResponse\x12d\n" +
	"\x13ConfigureCsvMapping\x12%.budget.v1.ConfigureCsvMappingRequest\x1a&.budget.v1.ConfigureCsvMappingResponse\x12[\n" +
	"\x10PreviewCsvImport\x12\".budget.v1.PreviewCsvImportRequest\x1a#.budget.v1.PreviewCsvImportResponse\x12X\n" +
	"\x0fCommitCsvImport\x12!.budget.v1.CommitCsvImportRequest\x1a\".budget.v1.CommitCsvImportResponseB8Z6github.com/positron48/budget/gen/go/budget/v1;budgetv1b\x06proto3"

var (
	file_budget_v1_import_proto_rawDescOnce sync.Once
	file_budget_v1_import_proto_rawDescData []byte
)

func file_budget_v1_import_proto_rawDescGZIP() []byte {
	file_budget_v1_import_proto_rawDescOnce.Do(func() {
		file_budget_v1_import_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_budget_v1_import_proto_rawDesc), len(file_budget_v1_import_proto_rawDesc)))
	})
	return file_budget_v1_import_proto_rawDescData
}

var (
	file_budget_v1_import_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
	file_budget_v1_import_proto_goTypes  = []any{
		(*StartCsvImportRequest)(nil),       // 0: budget.v1.StartCsvImportRequest
		(*StartCsvImportResponse)(nil),      // 1: budget.v1.StartCsvImportResponse
		(*UploadCsvChunkRequest)(nil),       // 2: budget.v1.UploadCsvChunkRequest
		(*UploadCsvChunkResponse)(nil),      // 3: budget.v1.UploadCsvChunkResponse
		(*CsvColumnMapping)(nil),            // 4: budget.v1.CsvColumnMapping
		(*ConfigureCsvMappingRequest)(nil),  // 5: budget.v1.ConfigureCsvMappingRequest
		(*ConfigureCsvMappingResponse)(nil), // 6: budget.v1.ConfigureCsvMappingResponse
		(*PreviewCsvImportRequest)(nil),     // 7: budget.v1.PreviewCsvImportRequest
		(*PreviewCsvImportResponse)(nil),    // 8: budget.v1.PreviewCsvImportResponse
		(*CommitCsvImportRequest)(nil),      // 9: budget.v1.CommitCsvImportRequest
		(*CommitCsvImportResponse)(nil),     // 10: budget.v1.CommitCsvImportResponse
	}
)
var file_budget_v1_import_proto_depIdxs = []int32{
	4,  // 0: budget.v1.ConfigureCsvMappingRequest.mapping:type_name -> budget.v1.CsvColumnMapping
	0,  // 1: budget.v1.ImportService.StartCsvImport:input_type -> budget.v1.StartCsvImportRequest
	2,  // 2: budget.v1.ImportService.UploadCsvChunk:input_type -> budget.v1.UploadCsvChunkRequest
	5,  // 3: budget.v1.ImportService.ConfigureCsvMapping:input_type -> budget.v1.ConfigureCsvMappingRequest
	7,  // 4: budget.v1.ImportService.PreviewCsvImport:input_type -> budget.v1.PreviewCsvImportRequest
	9,  // 5: budget.v1.ImportService.CommitCsvImport:input_type -> budget.v1.CommitCsvImportRequest
	1,  // 6: budget.v1.ImportService.StartCsvImport:output_type -> budget.v1.StartCsvImportResponse
	3,  // 7: budget.v1.ImportService.UploadCsvChunk:output_type -> budget.v1.UploadCsvChunkResponse
	6,  // 8: budget.v1.ImportService.ConfigureCsvMapping:output_type -> budget.v1.ConfigureCsvMappingResponse
	8,  // 9: budget.v1.ImportService.PreviewCsvImport:output_type -> budget.v1.PreviewCsvImportResponse
	10, // 10: budget.v1.ImportService.CommitCsvImport:output_type -> budget.v1.CommitCsvImportResponse
	6,  // [6:11] is the sub-list for method output_type
	1,  // [1:6] is the sub-list for method input_type
	1,  // [1:1] is the sub-list for extension type_name
	1,  // [1:1] is the sub-list for extension extendee
	0,  // [0:1] is the sub-list for field type_name
}

func init() { file_budget_v1_import_proto_init() }
func file_budget_v1_import_proto_init() {
	if File_budget_v1_import_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_budget_v1_import_proto_rawDesc), len(file_budget_v1_import_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_budget_v1_import_proto_goTypes,
		DependencyIndexes: file_budget_v1_import_proto_depIdxs,
		MessageInfos:      file_budget_v1_import_proto_msgTypes,
	}.Build()
	File_budget_v1_import_proto = out.File
	file_budget_v1_import_proto_goTypes = nil
	file_budget_v1_import_proto_depIdxs = nil
}
