name: Security Audit

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  schedule:
    # Run security audit weekly
    - cron: '0 0 * * 0'

permissions:
  security-events: write
  actions: read
  contents: read

jobs:
  # Go Security Audit
  go-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Go
      uses: actions/setup-go@v6
      with:
        go-version: '1.24'
        cache: true
        
    - name: Install Go dependencies
      run: |
        go mod download
        go mod verify
        
    - name: Install Nancy
      run: |
        go install github.com/sonatype-nexus-community/nancy@latest
        
    - name: Run Go security audit
      run: |
        go list -json -deps ./... | nancy sleuth
        
    - name: Check for Go vulnerabilities
      run: |
        # Run nancy and check for vulnerabilities
        OUTPUT=$(go list -json -deps ./... | nancy sleuth -q 2>&1)
        echo "$OUTPUT"
        
        # Check if the output contains any vulnerability details
        if echo "$OUTPUT" | grep -q "CVE-"; then
          echo "❌ Vulnerabilities found"
          exit 1
        fi
        
        echo "✅ No vulnerabilities found"
        
  # Node.js Security Audit
  node-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        cache-dependency-path: web/package-lock.json
        
    - name: Install frontend dependencies
      run: |
        cd web
        npm ci
        
    - name: Run npm audit
      run: |
        cd web
        npm audit --audit-level=moderate || {
          echo "❌ npm audit found vulnerabilities"
          exit 1
        }
        echo "✅ npm audit passed"
        
    - name: Check for outdated packages
      run: |
        cd web
        npm outdated || true
        
  # Container Security
  container-security:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run Trivy vulnerability scanner on Dockerfiles
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'config'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-config-results.sarif'
        
    - name: Upload Trivy config scan results
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: 'trivy-config-results.sarif'
