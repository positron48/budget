// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file budget/v1/common.proto (package budget.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum budget.v1.TransactionType
 */
export enum TransactionType {
  /**
   * @generated from enum value: TRANSACTION_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TRANSACTION_TYPE_INCOME = 1;
   */
  INCOME = 1,

  /**
   * @generated from enum value: TRANSACTION_TYPE_EXPENSE = 2;
   */
  EXPENSE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(TransactionType)
proto3.util.setEnumType(TransactionType, "budget.v1.TransactionType", [
  { no: 0, name: "TRANSACTION_TYPE_UNSPECIFIED" },
  { no: 1, name: "TRANSACTION_TYPE_INCOME" },
  { no: 2, name: "TRANSACTION_TYPE_EXPENSE" },
]);

/**
 * @generated from enum budget.v1.CategoryKind
 */
export enum CategoryKind {
  /**
   * @generated from enum value: CATEGORY_KIND_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: CATEGORY_KIND_INCOME = 1;
   */
  INCOME = 1,

  /**
   * @generated from enum value: CATEGORY_KIND_EXPENSE = 2;
   */
  EXPENSE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(CategoryKind)
proto3.util.setEnumType(CategoryKind, "budget.v1.CategoryKind", [
  { no: 0, name: "CATEGORY_KIND_UNSPECIFIED" },
  { no: 1, name: "CATEGORY_KIND_INCOME" },
  { no: 2, name: "CATEGORY_KIND_EXPENSE" },
]);

/**
 * Generic money representation using minor currency units (e.g., cents)
 *
 * @generated from message budget.v1.Money
 */
export class Money extends Message<Money> {
  /**
   * ISO 4217, e.g. "USD", "EUR", "RUB"
   *
   * @generated from field: string currency_code = 1;
   */
  currencyCode = "";

  /**
   * integer number of minor units (cents/kopecks)
   *
   * @generated from field: int64 minor_units = 2;
   */
  minorUnits = protoInt64.zero;

  constructor(data?: PartialMessage<Money>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.Money";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "minor_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Money {
    return new Money().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Money {
    return new Money().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Money {
    return new Money().fromJsonString(jsonString, options);
  }

  static equals(a: Money | PlainMessage<Money> | undefined, b: Money | PlainMessage<Money> | undefined): boolean {
    return proto3.util.equals(Money, a, b);
  }
}

/**
 * Foreign exchange info applied to a conversion at a specific date
 * Semantics: to_amount = from_amount * rate_decimal
 *
 * @generated from message budget.v1.FxInfo
 */
export class FxInfo extends Message<FxInfo> {
  /**
   * original currency
   *
   * @generated from field: string from_currency_code = 1;
   */
  fromCurrencyCode = "";

  /**
   * target/base currency
   *
   * @generated from field: string to_currency_code = 2;
   */
  toCurrencyCode = "";

  /**
   * decimal string, e.g. "92.3456"
   *
   * @generated from field: string rate_decimal = 3;
   */
  rateDecimal = "";

  /**
   * date/time the rate was taken for
   *
   * @generated from field: google.protobuf.Timestamp as_of = 4;
   */
  asOf?: Timestamp;

  /**
   * e.g. "ecb", "cbr", "manual"
   *
   * @generated from field: string provider = 5;
   */
  provider = "";

  constructor(data?: PartialMessage<FxInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.FxInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rate_decimal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "as_of", kind: "message", T: Timestamp },
    { no: 5, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FxInfo {
    return new FxInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FxInfo {
    return new FxInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FxInfo {
    return new FxInfo().fromJsonString(jsonString, options);
  }

  static equals(a: FxInfo | PlainMessage<FxInfo> | undefined, b: FxInfo | PlainMessage<FxInfo> | undefined): boolean {
    return proto3.util.equals(FxInfo, a, b);
  }
}

/**
 * @generated from message budget.v1.PageRequest
 */
export class PageRequest extends Message<PageRequest> {
  /**
   * 1-based
   *
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * max enforced server-side
   *
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * e.g. "occurred_at desc"
   *
   * @generated from field: string sort = 3;
   */
  sort = "";

  constructor(data?: PartialMessage<PageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.PageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "sort", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageRequest {
    return new PageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageRequest {
    return new PageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageRequest {
    return new PageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PageRequest | PlainMessage<PageRequest> | undefined, b: PageRequest | PlainMessage<PageRequest> | undefined): boolean {
    return proto3.util.equals(PageRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.PageResponse
 */
export class PageResponse extends Message<PageResponse> {
  /**
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * @generated from field: int32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: int64 total_items = 3;
   */
  totalItems = protoInt64.zero;

  /**
   * @generated from field: int32 total_pages = 4;
   */
  totalPages = 0;

  constructor(data?: PartialMessage<PageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.PageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "page_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "total_items", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "total_pages", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageResponse {
    return new PageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageResponse {
    return new PageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageResponse {
    return new PageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PageResponse | PlainMessage<PageResponse> | undefined, b: PageResponse | PlainMessage<PageResponse> | undefined): boolean {
    return proto3.util.equals(PageResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.DateRange
 */
export class DateRange extends Message<DateRange> {
  /**
   * @generated from field: google.protobuf.Timestamp from = 1;
   */
  from?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp to = 2;
   */
  to?: Timestamp;

  constructor(data?: PartialMessage<DateRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.DateRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "message", T: Timestamp },
    { no: 2, name: "to", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DateRange {
    return new DateRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DateRange {
    return new DateRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DateRange {
    return new DateRange().fromJsonString(jsonString, options);
  }

  static equals(a: DateRange | PlainMessage<DateRange> | undefined, b: DateRange | PlainMessage<DateRange> | undefined): boolean {
    return proto3.util.equals(DateRange, a, b);
  }
}

