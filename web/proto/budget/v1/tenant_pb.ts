// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file budget/v1/tenant.proto (package budget.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum budget.v1.TenantRole
 */
export enum TenantRole {
  /**
   * @generated from enum value: TENANT_ROLE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TENANT_ROLE_OWNER = 1;
   */
  OWNER = 1,

  /**
   * @generated from enum value: TENANT_ROLE_ADMIN = 2;
   */
  ADMIN = 2,

  /**
   * @generated from enum value: TENANT_ROLE_MEMBER = 3;
   */
  MEMBER = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(TenantRole)
proto3.util.setEnumType(TenantRole, "budget.v1.TenantRole", [
  { no: 0, name: "TENANT_ROLE_UNSPECIFIED" },
  { no: 1, name: "TENANT_ROLE_OWNER" },
  { no: 2, name: "TENANT_ROLE_ADMIN" },
  { no: 3, name: "TENANT_ROLE_MEMBER" },
]);

/**
 * @generated from message budget.v1.Tenant
 */
export class Tenant extends Message<Tenant> {
  /**
   * UUID
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Display name
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * URL-friendly identifier
   *
   * @generated from field: string slug = 3;
   */
  slug = "";

  /**
   * e.g. "USD", "RUB"
   *
   * @generated from field: string default_currency_code = 4;
   */
  defaultCurrencyCode = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 5;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Tenant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.Tenant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "default_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Tenant {
    return new Tenant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Tenant {
    return new Tenant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Tenant {
    return new Tenant().fromJsonString(jsonString, options);
  }

  static equals(a: Tenant | PlainMessage<Tenant> | undefined, b: Tenant | PlainMessage<Tenant> | undefined): boolean {
    return proto3.util.equals(Tenant, a, b);
  }
}

/**
 * @generated from message budget.v1.TenantMembership
 */
export class TenantMembership extends Message<TenantMembership> {
  /**
   * @generated from field: budget.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  /**
   * @generated from field: budget.v1.TenantRole role = 2;
   */
  role = TenantRole.UNSPECIFIED;

  /**
   * @generated from field: bool is_default = 3;
   */
  isDefault = false;

  constructor(data?: PartialMessage<TenantMembership>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.TenantMembership";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
    { no: 2, name: "role", kind: "enum", T: proto3.getEnumType(TenantRole) },
    { no: 3, name: "is_default", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TenantMembership {
    return new TenantMembership().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TenantMembership {
    return new TenantMembership().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TenantMembership {
    return new TenantMembership().fromJsonString(jsonString, options);
  }

  static equals(a: TenantMembership | PlainMessage<TenantMembership> | undefined, b: TenantMembership | PlainMessage<TenantMembership> | undefined): boolean {
    return proto3.util.equals(TenantMembership, a, b);
  }
}

/**
 * @generated from message budget.v1.CreateTenantRequest
 */
export class CreateTenantRequest extends Message<CreateTenantRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * optional, server may generate
   *
   * @generated from field: string slug = 2;
   */
  slug = "";

  /**
   * @generated from field: string default_currency_code = 3;
   */
  defaultCurrencyCode = "";

  constructor(data?: PartialMessage<CreateTenantRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.CreateTenantRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "slug", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "default_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTenantRequest {
    return new CreateTenantRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTenantRequest {
    return new CreateTenantRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTenantRequest {
    return new CreateTenantRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTenantRequest | PlainMessage<CreateTenantRequest> | undefined, b: CreateTenantRequest | PlainMessage<CreateTenantRequest> | undefined): boolean {
    return proto3.util.equals(CreateTenantRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.CreateTenantResponse
 */
export class CreateTenantResponse extends Message<CreateTenantResponse> {
  /**
   * @generated from field: budget.v1.Tenant tenant = 1;
   */
  tenant?: Tenant;

  constructor(data?: PartialMessage<CreateTenantResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.CreateTenantResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tenant", kind: "message", T: Tenant },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTenantResponse {
    return new CreateTenantResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTenantResponse {
    return new CreateTenantResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTenantResponse {
    return new CreateTenantResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTenantResponse | PlainMessage<CreateTenantResponse> | undefined, b: CreateTenantResponse | PlainMessage<CreateTenantResponse> | undefined): boolean {
    return proto3.util.equals(CreateTenantResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.ListMyTenantsRequest
 */
export class ListMyTenantsRequest extends Message<ListMyTenantsRequest> {
  constructor(data?: PartialMessage<ListMyTenantsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.ListMyTenantsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMyTenantsRequest {
    return new ListMyTenantsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMyTenantsRequest {
    return new ListMyTenantsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMyTenantsRequest {
    return new ListMyTenantsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListMyTenantsRequest | PlainMessage<ListMyTenantsRequest> | undefined, b: ListMyTenantsRequest | PlainMessage<ListMyTenantsRequest> | undefined): boolean {
    return proto3.util.equals(ListMyTenantsRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.ListMyTenantsResponse
 */
export class ListMyTenantsResponse extends Message<ListMyTenantsResponse> {
  /**
   * @generated from field: repeated budget.v1.TenantMembership memberships = 1;
   */
  memberships: TenantMembership[] = [];

  constructor(data?: PartialMessage<ListMyTenantsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.ListMyTenantsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "memberships", kind: "message", T: TenantMembership, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListMyTenantsResponse {
    return new ListMyTenantsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListMyTenantsResponse {
    return new ListMyTenantsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListMyTenantsResponse {
    return new ListMyTenantsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListMyTenantsResponse | PlainMessage<ListMyTenantsResponse> | undefined, b: ListMyTenantsResponse | PlainMessage<ListMyTenantsResponse> | undefined): boolean {
    return proto3.util.equals(ListMyTenantsResponse, a, b);
  }
}

