// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file budget/v1/fx.proto (package budget.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * Represents a single FX rate quote (from â†’ to) as of specific date/time
 *
 * @generated from message budget.v1.FxRate
 */
export class FxRate extends Message<FxRate> {
  /**
   * e.g. "USD"
   *
   * @generated from field: string from_currency_code = 1;
   */
  fromCurrencyCode = "";

  /**
   * e.g. "RUB"
   *
   * @generated from field: string to_currency_code = 2;
   */
  toCurrencyCode = "";

  /**
   * e.g. "92.3456"
   *
   * @generated from field: string rate_decimal = 3;
   */
  rateDecimal = "";

  /**
   * @generated from field: google.protobuf.Timestamp as_of = 4;
   */
  asOf?: Timestamp;

  /**
   * e.g. "ecb", "cbr", "manual"
   *
   * @generated from field: string provider = 5;
   */
  provider = "";

  constructor(data?: PartialMessage<FxRate>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.FxRate";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "rate_decimal", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "as_of", kind: "message", T: Timestamp },
    { no: 5, name: "provider", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): FxRate {
    return new FxRate().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): FxRate {
    return new FxRate().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): FxRate {
    return new FxRate().fromJsonString(jsonString, options);
  }

  static equals(a: FxRate | PlainMessage<FxRate> | undefined, b: FxRate | PlainMessage<FxRate> | undefined): boolean {
    return proto3.util.equals(FxRate, a, b);
  }
}

/**
 * @generated from message budget.v1.GetRateRequest
 */
export class GetRateRequest extends Message<GetRateRequest> {
  /**
   * @generated from field: string from_currency_code = 1;
   */
  fromCurrencyCode = "";

  /**
   * @generated from field: string to_currency_code = 2;
   */
  toCurrencyCode = "";

  /**
   * date at which to get the rate (truncate to day server-side if needed)
   *
   * @generated from field: google.protobuf.Timestamp as_of = 3;
   */
  asOf?: Timestamp;

  constructor(data?: PartialMessage<GetRateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.GetRateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "to_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "as_of", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRateRequest {
    return new GetRateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRateRequest {
    return new GetRateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRateRequest {
    return new GetRateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRateRequest | PlainMessage<GetRateRequest> | undefined, b: GetRateRequest | PlainMessage<GetRateRequest> | undefined): boolean {
    return proto3.util.equals(GetRateRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.GetRateResponse
 */
export class GetRateResponse extends Message<GetRateResponse> {
  /**
   * @generated from field: budget.v1.FxRate rate = 1;
   */
  rate?: FxRate;

  constructor(data?: PartialMessage<GetRateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.GetRateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rate", kind: "message", T: FxRate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRateResponse {
    return new GetRateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRateResponse {
    return new GetRateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRateResponse {
    return new GetRateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRateResponse | PlainMessage<GetRateResponse> | undefined, b: GetRateResponse | PlainMessage<GetRateResponse> | undefined): boolean {
    return proto3.util.equals(GetRateResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.UpsertRateRequest
 */
export class UpsertRateRequest extends Message<UpsertRateRequest> {
  /**
   * @generated from field: budget.v1.FxRate rate = 1;
   */
  rate?: FxRate;

  constructor(data?: PartialMessage<UpsertRateRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.UpsertRateRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rate", kind: "message", T: FxRate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertRateRequest {
    return new UpsertRateRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertRateRequest {
    return new UpsertRateRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertRateRequest {
    return new UpsertRateRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertRateRequest | PlainMessage<UpsertRateRequest> | undefined, b: UpsertRateRequest | PlainMessage<UpsertRateRequest> | undefined): boolean {
    return proto3.util.equals(UpsertRateRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.UpsertRateResponse
 */
export class UpsertRateResponse extends Message<UpsertRateResponse> {
  /**
   * @generated from field: budget.v1.FxRate rate = 1;
   */
  rate?: FxRate;

  constructor(data?: PartialMessage<UpsertRateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.UpsertRateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rate", kind: "message", T: FxRate },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpsertRateResponse {
    return new UpsertRateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpsertRateResponse {
    return new UpsertRateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpsertRateResponse {
    return new UpsertRateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpsertRateResponse | PlainMessage<UpsertRateResponse> | undefined, b: UpsertRateResponse | PlainMessage<UpsertRateResponse> | undefined): boolean {
    return proto3.util.equals(UpsertRateResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.BatchGetRatesRequest
 */
export class BatchGetRatesRequest extends Message<BatchGetRatesRequest> {
  /**
   * @generated from field: repeated string from_currency_codes = 1;
   */
  fromCurrencyCodes: string[] = [];

  /**
   * @generated from field: string to_currency_code = 2;
   */
  toCurrencyCode = "";

  /**
   * @generated from field: google.protobuf.Timestamp as_of = 3;
   */
  asOf?: Timestamp;

  constructor(data?: PartialMessage<BatchGetRatesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.BatchGetRatesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from_currency_codes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 2, name: "to_currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "as_of", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchGetRatesRequest {
    return new BatchGetRatesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchGetRatesRequest {
    return new BatchGetRatesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchGetRatesRequest {
    return new BatchGetRatesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: BatchGetRatesRequest | PlainMessage<BatchGetRatesRequest> | undefined, b: BatchGetRatesRequest | PlainMessage<BatchGetRatesRequest> | undefined): boolean {
    return proto3.util.equals(BatchGetRatesRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.BatchGetRatesResponse
 */
export class BatchGetRatesResponse extends Message<BatchGetRatesResponse> {
  /**
   * @generated from field: repeated budget.v1.FxRate rates = 1;
   */
  rates: FxRate[] = [];

  constructor(data?: PartialMessage<BatchGetRatesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.BatchGetRatesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rates", kind: "message", T: FxRate, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BatchGetRatesResponse {
    return new BatchGetRatesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BatchGetRatesResponse {
    return new BatchGetRatesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BatchGetRatesResponse {
    return new BatchGetRatesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: BatchGetRatesResponse | PlainMessage<BatchGetRatesResponse> | undefined, b: BatchGetRatesResponse | PlainMessage<BatchGetRatesResponse> | undefined): boolean {
    return proto3.util.equals(BatchGetRatesResponse, a, b);
  }
}

