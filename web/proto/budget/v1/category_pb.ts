// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file budget/v1/category.proto (package budget.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { CategoryKind } from "./common_pb";

/**
 * @generated from message budget.v1.CategoryTranslation
 */
export class CategoryTranslation extends Message<CategoryTranslation> {
  /**
   * e.g. "en", "ru"
   *
   * @generated from field: string locale = 1;
   */
  locale = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<CategoryTranslation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.CategoryTranslation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CategoryTranslation {
    return new CategoryTranslation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CategoryTranslation {
    return new CategoryTranslation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CategoryTranslation {
    return new CategoryTranslation().fromJsonString(jsonString, options);
  }

  static equals(a: CategoryTranslation | PlainMessage<CategoryTranslation> | undefined, b: CategoryTranslation | PlainMessage<CategoryTranslation> | undefined): boolean {
    return proto3.util.equals(CategoryTranslation, a, b);
  }
}

/**
 * @generated from message budget.v1.Category
 */
export class Category extends Message<Category> {
  /**
   * UUID
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * UUID
   *
   * @generated from field: string tenant_id = 2;
   */
  tenantId = "";

  /**
   * income / expense
   *
   * @generated from field: budget.v1.CategoryKind kind = 3;
   */
  kind = CategoryKind.UNSPECIFIED;

  /**
   * unique per tenant+kind
   *
   * @generated from field: string code = 4;
   */
  code = "";

  /**
   * optional (for hierarchy)
   *
   * @generated from field: string parent_id = 5;
   */
  parentId = "";

  /**
   * @generated from field: bool is_active = 6;
   */
  isActive = false;

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 7;
   */
  createdAt?: Timestamp;

  /**
   * @generated from field: repeated budget.v1.CategoryTranslation translations = 8;
   */
  translations: CategoryTranslation[] = [];

  constructor(data?: PartialMessage<Category>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.Category";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "kind", kind: "enum", T: proto3.getEnumType(CategoryKind) },
    { no: 4, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "created_at", kind: "message", T: Timestamp },
    { no: 8, name: "translations", kind: "message", T: CategoryTranslation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Category {
    return new Category().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Category {
    return new Category().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Category {
    return new Category().fromJsonString(jsonString, options);
  }

  static equals(a: Category | PlainMessage<Category> | undefined, b: Category | PlainMessage<Category> | undefined): boolean {
    return proto3.util.equals(Category, a, b);
  }
}

/**
 * @generated from message budget.v1.CreateCategoryRequest
 */
export class CreateCategoryRequest extends Message<CreateCategoryRequest> {
  /**
   * @generated from field: budget.v1.CategoryKind kind = 1;
   */
  kind = CategoryKind.UNSPECIFIED;

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string parent_id = 3;
   */
  parentId = "";

  /**
   * @generated from field: bool is_active = 4;
   */
  isActive = false;

  /**
   * @generated from field: repeated budget.v1.CategoryTranslation translations = 5;
   */
  translations: CategoryTranslation[] = [];

  constructor(data?: PartialMessage<CreateCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.CreateCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(CategoryKind) },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "translations", kind: "message", T: CategoryTranslation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCategoryRequest {
    return new CreateCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCategoryRequest | PlainMessage<CreateCategoryRequest> | undefined, b: CreateCategoryRequest | PlainMessage<CreateCategoryRequest> | undefined): boolean {
    return proto3.util.equals(CreateCategoryRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.CreateCategoryResponse
 */
export class CreateCategoryResponse extends Message<CreateCategoryResponse> {
  /**
   * @generated from field: budget.v1.Category category = 1;
   */
  category?: Category;

  constructor(data?: PartialMessage<CreateCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.CreateCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "category", kind: "message", T: Category },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateCategoryResponse {
    return new CreateCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateCategoryResponse {
    return new CreateCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateCategoryResponse {
    return new CreateCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateCategoryResponse | PlainMessage<CreateCategoryResponse> | undefined, b: CreateCategoryResponse | PlainMessage<CreateCategoryResponse> | undefined): boolean {
    return proto3.util.equals(CreateCategoryResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.UpdateCategoryRequest
 */
export class UpdateCategoryRequest extends Message<UpdateCategoryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string code = 2;
   */
  code = "";

  /**
   * @generated from field: string parent_id = 3;
   */
  parentId = "";

  /**
   * @generated from field: bool is_active = 4;
   */
  isActive = false;

  /**
   * @generated from field: repeated budget.v1.CategoryTranslation translations = 5;
   */
  translations: CategoryTranslation[] = [];

  constructor(data?: PartialMessage<UpdateCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.UpdateCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "parent_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "is_active", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "translations", kind: "message", T: CategoryTranslation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCategoryRequest {
    return new UpdateCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCategoryRequest {
    return new UpdateCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCategoryRequest {
    return new UpdateCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCategoryRequest | PlainMessage<UpdateCategoryRequest> | undefined, b: UpdateCategoryRequest | PlainMessage<UpdateCategoryRequest> | undefined): boolean {
    return proto3.util.equals(UpdateCategoryRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.UpdateCategoryResponse
 */
export class UpdateCategoryResponse extends Message<UpdateCategoryResponse> {
  /**
   * @generated from field: budget.v1.Category category = 1;
   */
  category?: Category;

  constructor(data?: PartialMessage<UpdateCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.UpdateCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "category", kind: "message", T: Category },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateCategoryResponse {
    return new UpdateCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateCategoryResponse {
    return new UpdateCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateCategoryResponse {
    return new UpdateCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateCategoryResponse | PlainMessage<UpdateCategoryResponse> | undefined, b: UpdateCategoryResponse | PlainMessage<UpdateCategoryResponse> | undefined): boolean {
    return proto3.util.equals(UpdateCategoryResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.DeleteCategoryRequest
 */
export class DeleteCategoryRequest extends Message<DeleteCategoryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.DeleteCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCategoryRequest {
    return new DeleteCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCategoryRequest {
    return new DeleteCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCategoryRequest {
    return new DeleteCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCategoryRequest | PlainMessage<DeleteCategoryRequest> | undefined, b: DeleteCategoryRequest | PlainMessage<DeleteCategoryRequest> | undefined): boolean {
    return proto3.util.equals(DeleteCategoryRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.DeleteCategoryResponse
 */
export class DeleteCategoryResponse extends Message<DeleteCategoryResponse> {
  constructor(data?: PartialMessage<DeleteCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.DeleteCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteCategoryResponse {
    return new DeleteCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteCategoryResponse {
    return new DeleteCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteCategoryResponse {
    return new DeleteCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteCategoryResponse | PlainMessage<DeleteCategoryResponse> | undefined, b: DeleteCategoryResponse | PlainMessage<DeleteCategoryResponse> | undefined): boolean {
    return proto3.util.equals(DeleteCategoryResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.GetCategoryRequest
 */
export class GetCategoryRequest extends Message<GetCategoryRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string locale = 2;
   */
  locale = "";

  constructor(data?: PartialMessage<GetCategoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.GetCategoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCategoryRequest {
    return new GetCategoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCategoryRequest {
    return new GetCategoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCategoryRequest {
    return new GetCategoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCategoryRequest | PlainMessage<GetCategoryRequest> | undefined, b: GetCategoryRequest | PlainMessage<GetCategoryRequest> | undefined): boolean {
    return proto3.util.equals(GetCategoryRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.GetCategoryResponse
 */
export class GetCategoryResponse extends Message<GetCategoryResponse> {
  /**
   * @generated from field: budget.v1.Category category = 1;
   */
  category?: Category;

  constructor(data?: PartialMessage<GetCategoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.GetCategoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "category", kind: "message", T: Category },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCategoryResponse {
    return new GetCategoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCategoryResponse {
    return new GetCategoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCategoryResponse {
    return new GetCategoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCategoryResponse | PlainMessage<GetCategoryResponse> | undefined, b: GetCategoryResponse | PlainMessage<GetCategoryResponse> | undefined): boolean {
    return proto3.util.equals(GetCategoryResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.ListCategoriesRequest
 */
export class ListCategoriesRequest extends Message<ListCategoriesRequest> {
  /**
   * @generated from field: budget.v1.CategoryKind kind = 1;
   */
  kind = CategoryKind.UNSPECIFIED;

  /**
   * @generated from field: bool include_inactive = 2;
   */
  includeInactive = false;

  /**
   * preferred translation
   *
   * @generated from field: string locale = 3;
   */
  locale = "";

  constructor(data?: PartialMessage<ListCategoriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.ListCategoriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "enum", T: proto3.getEnumType(CategoryKind) },
    { no: 2, name: "include_inactive", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "locale", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCategoriesRequest {
    return new ListCategoriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCategoriesRequest {
    return new ListCategoriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCategoriesRequest {
    return new ListCategoriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCategoriesRequest | PlainMessage<ListCategoriesRequest> | undefined, b: ListCategoriesRequest | PlainMessage<ListCategoriesRequest> | undefined): boolean {
    return proto3.util.equals(ListCategoriesRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.ListCategoriesResponse
 */
export class ListCategoriesResponse extends Message<ListCategoriesResponse> {
  /**
   * @generated from field: repeated budget.v1.Category categories = 1;
   */
  categories: Category[] = [];

  constructor(data?: PartialMessage<ListCategoriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.ListCategoriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categories", kind: "message", T: Category, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCategoriesResponse {
    return new ListCategoriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCategoriesResponse {
    return new ListCategoriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCategoriesResponse {
    return new ListCategoriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCategoriesResponse | PlainMessage<ListCategoriesResponse> | undefined, b: ListCategoriesResponse | PlainMessage<ListCategoriesResponse> | undefined): boolean {
    return proto3.util.equals(ListCategoriesResponse, a, b);
  }
}

