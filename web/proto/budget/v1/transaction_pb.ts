// @generated by protoc-gen-es v1.10.1 with parameter "target=ts,import_extension=none"
// @generated from file budget/v1/transaction.proto (package budget.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { FieldMask, Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";
import { DateRange, FxInfo, Money, PageRequest, PageResponse, TransactionType } from "./common_pb";

/**
 * @generated from message budget.v1.Transaction
 */
export class Transaction extends Message<Transaction> {
  /**
   * UUID
   *
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * UUID
   *
   * @generated from field: string tenant_id = 2;
   */
  tenantId = "";

  /**
   * UUID
   *
   * @generated from field: string user_id = 3;
   */
  userId = "";

  /**
   * UUID
   *
   * @generated from field: string category_id = 4;
   */
  categoryId = "";

  /**
   * income / expense
   *
   * @generated from field: budget.v1.TransactionType type = 5;
   */
  type = TransactionType.UNSPECIFIED;

  /**
   * original amount in transaction currency
   *
   * @generated from field: budget.v1.Money amount = 6;
   */
  amount?: Money;

  /**
   * amount converted to tenant's base currency (if currency differs)
   *
   * @generated from field: budget.v1.Money base_amount = 7;
   */
  baseAmount?: Money;

  /**
   * FX used to compute base_amount (optional if same currency)
   *
   * @generated from field: budget.v1.FxInfo fx = 8;
   */
  fx?: FxInfo;

  /**
   * @generated from field: google.protobuf.Timestamp occurred_at = 9;
   */
  occurredAt?: Timestamp;

  /**
   * @generated from field: string comment = 10;
   */
  comment = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_at = 11;
   */
  createdAt?: Timestamp;

  constructor(data?: PartialMessage<Transaction>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.Transaction";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tenant_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "category_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(TransactionType) },
    { no: 6, name: "amount", kind: "message", T: Money },
    { no: 7, name: "base_amount", kind: "message", T: Money },
    { no: 8, name: "fx", kind: "message", T: FxInfo },
    { no: 9, name: "occurred_at", kind: "message", T: Timestamp },
    { no: 10, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_at", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Transaction {
    return new Transaction().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Transaction {
    return new Transaction().fromJsonString(jsonString, options);
  }

  static equals(a: Transaction | PlainMessage<Transaction> | undefined, b: Transaction | PlainMessage<Transaction> | undefined): boolean {
    return proto3.util.equals(Transaction, a, b);
  }
}

/**
 * @generated from message budget.v1.CreateTransactionRequest
 */
export class CreateTransactionRequest extends Message<CreateTransactionRequest> {
  /**
   * @generated from field: budget.v1.TransactionType type = 1;
   */
  type = TransactionType.UNSPECIFIED;

  /**
   * @generated from field: string category_id = 2;
   */
  categoryId = "";

  /**
   * original amount
   *
   * @generated from field: budget.v1.Money amount = 3;
   */
  amount?: Money;

  /**
   * @generated from field: google.protobuf.Timestamp occurred_at = 4;
   */
  occurredAt?: Timestamp;

  /**
   * @generated from field: string comment = 5;
   */
  comment = "";

  constructor(data?: PartialMessage<CreateTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.CreateTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "enum", T: proto3.getEnumType(TransactionType) },
    { no: 2, name: "category_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "amount", kind: "message", T: Money },
    { no: 4, name: "occurred_at", kind: "message", T: Timestamp },
    { no: 5, name: "comment", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTransactionRequest {
    return new CreateTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTransactionRequest | PlainMessage<CreateTransactionRequest> | undefined, b: CreateTransactionRequest | PlainMessage<CreateTransactionRequest> | undefined): boolean {
    return proto3.util.equals(CreateTransactionRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.CreateTransactionResponse
 */
export class CreateTransactionResponse extends Message<CreateTransactionResponse> {
  /**
   * @generated from field: budget.v1.Transaction transaction = 1;
   */
  transaction?: Transaction;

  constructor(data?: PartialMessage<CreateTransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.CreateTransactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: Transaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTransactionResponse {
    return new CreateTransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTransactionResponse {
    return new CreateTransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTransactionResponse {
    return new CreateTransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTransactionResponse | PlainMessage<CreateTransactionResponse> | undefined, b: CreateTransactionResponse | PlainMessage<CreateTransactionResponse> | undefined): boolean {
    return proto3.util.equals(CreateTransactionResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.UpdateTransactionRequest
 */
export class UpdateTransactionRequest extends Message<UpdateTransactionRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * new values
   *
   * @generated from field: budget.v1.Transaction transaction = 2;
   */
  transaction?: Transaction;

  /**
   * paths relative to Transaction (e.g. "category_id,amount,comment,occurred_at")
   *
   * @generated from field: google.protobuf.FieldMask update_mask = 3;
   */
  updateMask?: FieldMask;

  constructor(data?: PartialMessage<UpdateTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.UpdateTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "transaction", kind: "message", T: Transaction },
    { no: 3, name: "update_mask", kind: "message", T: FieldMask },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTransactionRequest {
    return new UpdateTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTransactionRequest {
    return new UpdateTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTransactionRequest {
    return new UpdateTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTransactionRequest | PlainMessage<UpdateTransactionRequest> | undefined, b: UpdateTransactionRequest | PlainMessage<UpdateTransactionRequest> | undefined): boolean {
    return proto3.util.equals(UpdateTransactionRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.UpdateTransactionResponse
 */
export class UpdateTransactionResponse extends Message<UpdateTransactionResponse> {
  /**
   * @generated from field: budget.v1.Transaction transaction = 1;
   */
  transaction?: Transaction;

  constructor(data?: PartialMessage<UpdateTransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.UpdateTransactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: Transaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTransactionResponse {
    return new UpdateTransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTransactionResponse {
    return new UpdateTransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTransactionResponse {
    return new UpdateTransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTransactionResponse | PlainMessage<UpdateTransactionResponse> | undefined, b: UpdateTransactionResponse | PlainMessage<UpdateTransactionResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTransactionResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.DeleteTransactionRequest
 */
export class DeleteTransactionRequest extends Message<DeleteTransactionRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<DeleteTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.DeleteTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTransactionRequest {
    return new DeleteTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTransactionRequest {
    return new DeleteTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTransactionRequest {
    return new DeleteTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTransactionRequest | PlainMessage<DeleteTransactionRequest> | undefined, b: DeleteTransactionRequest | PlainMessage<DeleteTransactionRequest> | undefined): boolean {
    return proto3.util.equals(DeleteTransactionRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.DeleteTransactionResponse
 */
export class DeleteTransactionResponse extends Message<DeleteTransactionResponse> {
  constructor(data?: PartialMessage<DeleteTransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.DeleteTransactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTransactionResponse {
    return new DeleteTransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTransactionResponse {
    return new DeleteTransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTransactionResponse {
    return new DeleteTransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTransactionResponse | PlainMessage<DeleteTransactionResponse> | undefined, b: DeleteTransactionResponse | PlainMessage<DeleteTransactionResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTransactionResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.GetTransactionRequest
 */
export class GetTransactionRequest extends Message<GetTransactionRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  constructor(data?: PartialMessage<GetTransactionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.GetTransactionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionRequest {
    return new GetTransactionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionRequest {
    return new GetTransactionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionRequest {
    return new GetTransactionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionRequest | PlainMessage<GetTransactionRequest> | undefined, b: GetTransactionRequest | PlainMessage<GetTransactionRequest> | undefined): boolean {
    return proto3.util.equals(GetTransactionRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.GetTransactionResponse
 */
export class GetTransactionResponse extends Message<GetTransactionResponse> {
  /**
   * @generated from field: budget.v1.Transaction transaction = 1;
   */
  transaction?: Transaction;

  constructor(data?: PartialMessage<GetTransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.GetTransactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transaction", kind: "message", T: Transaction },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionResponse {
    return new GetTransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionResponse {
    return new GetTransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionResponse {
    return new GetTransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionResponse | PlainMessage<GetTransactionResponse> | undefined, b: GetTransactionResponse | PlainMessage<GetTransactionResponse> | undefined): boolean {
    return proto3.util.equals(GetTransactionResponse, a, b);
  }
}

/**
 * @generated from message budget.v1.ListTransactionsRequest
 */
export class ListTransactionsRequest extends Message<ListTransactionsRequest> {
  /**
   * @generated from field: budget.v1.PageRequest page = 1;
   */
  page?: PageRequest;

  /**
   * @generated from field: budget.v1.DateRange date_range = 2;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: repeated string category_ids = 3;
   */
  categoryIds: string[] = [];

  /**
   * optional filter
   *
   * @generated from field: budget.v1.TransactionType type = 4;
   */
  type = TransactionType.UNSPECIFIED;

  /**
   * optional amount filters
   *
   * @generated from field: int64 min_minor_units = 5;
   */
  minMinorUnits = protoInt64.zero;

  /**
   * @generated from field: int64 max_minor_units = 6;
   */
  maxMinorUnits = protoInt64.zero;

  /**
   * optional filter by transaction currency
   *
   * @generated from field: string currency_code = 7;
   */
  currencyCode = "";

  /**
   * comment search
   *
   * @generated from field: string search = 8;
   */
  search = "";

  constructor(data?: PartialMessage<ListTransactionsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.ListTransactionsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "message", T: PageRequest },
    { no: 2, name: "date_range", kind: "message", T: DateRange },
    { no: 3, name: "category_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(TransactionType) },
    { no: 5, name: "min_minor_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "max_minor_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTransactionsRequest {
    return new ListTransactionsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTransactionsRequest {
    return new ListTransactionsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTransactionsRequest {
    return new ListTransactionsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTransactionsRequest | PlainMessage<ListTransactionsRequest> | undefined, b: ListTransactionsRequest | PlainMessage<ListTransactionsRequest> | undefined): boolean {
    return proto3.util.equals(ListTransactionsRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.ListTransactionsResponse
 */
export class ListTransactionsResponse extends Message<ListTransactionsResponse> {
  /**
   * @generated from field: repeated budget.v1.Transaction transactions = 1;
   */
  transactions: Transaction[] = [];

  /**
   * @generated from field: budget.v1.PageResponse page = 2;
   */
  page?: PageResponse;

  constructor(data?: PartialMessage<ListTransactionsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.ListTransactionsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "transactions", kind: "message", T: Transaction, repeated: true },
    { no: 2, name: "page", kind: "message", T: PageResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTransactionsResponse {
    return new ListTransactionsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTransactionsResponse {
    return new ListTransactionsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTransactionsResponse {
    return new ListTransactionsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTransactionsResponse | PlainMessage<ListTransactionsResponse> | undefined, b: ListTransactionsResponse | PlainMessage<ListTransactionsResponse> | undefined): boolean {
    return proto3.util.equals(ListTransactionsResponse, a, b);
  }
}

/**
 * Filtered totals for transactions (ignores pagination). Totals are returned in tenant base currency.
 *
 * @generated from message budget.v1.GetTransactionsTotalsRequest
 */
export class GetTransactionsTotalsRequest extends Message<GetTransactionsTotalsRequest> {
  /**
   * @generated from field: budget.v1.DateRange date_range = 1;
   */
  dateRange?: DateRange;

  /**
   * @generated from field: repeated string category_ids = 2;
   */
  categoryIds: string[] = [];

  /**
   * optional filter
   *
   * @generated from field: budget.v1.TransactionType type = 3;
   */
  type = TransactionType.UNSPECIFIED;

  /**
   * optional amount filters (by original amount)
   *
   * @generated from field: int64 min_minor_units = 4;
   */
  minMinorUnits = protoInt64.zero;

  /**
   * @generated from field: int64 max_minor_units = 5;
   */
  maxMinorUnits = protoInt64.zero;

  /**
   * optional filter by transaction currency
   *
   * @generated from field: string currency_code = 6;
   */
  currencyCode = "";

  /**
   * comment search
   *
   * @generated from field: string search = 7;
   */
  search = "";

  constructor(data?: PartialMessage<GetTransactionsTotalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.GetTransactionsTotalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "date_range", kind: "message", T: DateRange },
    { no: 2, name: "category_ids", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "type", kind: "enum", T: proto3.getEnumType(TransactionType) },
    { no: 4, name: "min_minor_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "max_minor_units", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "currency_code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "search", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionsTotalsRequest {
    return new GetTransactionsTotalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionsTotalsRequest {
    return new GetTransactionsTotalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionsTotalsRequest {
    return new GetTransactionsTotalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionsTotalsRequest | PlainMessage<GetTransactionsTotalsRequest> | undefined, b: GetTransactionsTotalsRequest | PlainMessage<GetTransactionsTotalsRequest> | undefined): boolean {
    return proto3.util.equals(GetTransactionsTotalsRequest, a, b);
  }
}

/**
 * @generated from message budget.v1.GetTransactionsTotalsResponse
 */
export class GetTransactionsTotalsResponse extends Message<GetTransactionsTotalsResponse> {
  /**
   * in tenant base currency
   *
   * @generated from field: budget.v1.Money total_income = 1;
   */
  totalIncome?: Money;

  /**
   * in tenant base currency
   *
   * @generated from field: budget.v1.Money total_expense = 2;
   */
  totalExpense?: Money;

  constructor(data?: PartialMessage<GetTransactionsTotalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "budget.v1.GetTransactionsTotalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_income", kind: "message", T: Money },
    { no: 2, name: "total_expense", kind: "message", T: Money },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTransactionsTotalsResponse {
    return new GetTransactionsTotalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTransactionsTotalsResponse {
    return new GetTransactionsTotalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTransactionsTotalsResponse {
    return new GetTransactionsTotalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTransactionsTotalsResponse | PlainMessage<GetTransactionsTotalsResponse> | undefined, b: GetTransactionsTotalsResponse | PlainMessage<GetTransactionsTotalsResponse> | undefined): boolean {
    return proto3.util.equals(GetTransactionsTotalsResponse, a, b);
  }
}

