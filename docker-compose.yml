services:
  db:
    image: postgres:15
    environment:
      POSTGRES_DB: budget
      POSTGRES_USER: budget
      POSTGRES_PASSWORD: budget
    volumes:
      - ./.data/postgres:/var/lib/postgresql/data
    restart: unless-stopped
    networks:
      - budget-network
    # Порт доступен только внутри Docker сети
    expose:
      - "5432"

  redis:
    image: redis:7-alpine
    volumes:
      - ./.data/redis:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - budget-network
    # Порт доступен только внутри Docker сети
    expose:
      - "6379"

  app:
    build:
      context: .
      dockerfile: deploy/Dockerfile
    env_file:
      - .env
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - budget-network
    # Порт доступен только внутри Docker сети
    expose:
      - "8080"
    # Development: порт для локальной разработки
    ports:
      - "${GRPC_PORT:-8080}:8080"

  web:
    build:
      context: ./web
      dockerfile: Dockerfile
      args:
        NEXT_PUBLIC_GRPC_BASE_URL: ${NEXT_PUBLIC_GRPC_BASE_URL}
        NEXT_PUBLIC_APP_URL: ${NEXT_PUBLIC_APP_URL}
        ENVOY_URL: ${ENVOY_URL}
    env_file:
      - .env
    restart: unless-stopped
    networks:
      - budget-network
    # Порт доступен только внутри Docker сети
    expose:
      - "3000"
    # Development: порт для локальной разработки
    ports:
      - "${WEB_PORT:-3030}:3000"
    depends_on:
      - envoy

  envoy:
    image: envoyproxy/envoy:v1.31.0
    volumes:
      - ./deploy/envoy.yaml:/etc/envoy/envoy.yaml:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - budget-network
    # Порт доступен только внутри Docker сети
    expose:
      - "8081"
    # Development: порт для локальной разработки
    ports:
      - "${ENVOY_PORT:-8081}:8081"

  prometheus:
    image: prom/prometheus:v2.51.2
    profiles: ["obs"]
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    restart: unless-stopped
    networks:
      - budget-network
    # Порт доступен только внутри Docker сети
    expose:
      - "9090"
    # Development: порт для локальной разработки
    ports:
      - "${PROMETHEUS_PORT:-9090}:9090"
    depends_on:
      - app

  grafana:
    image: grafana/grafana:10.4.5
    profiles: ["obs"]
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Viewer
    volumes:
      - ./deploy/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./deploy/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    networks:
      - budget-network
    # Порт доступен только внутри Docker сети
    expose:
      - "3000"
    # Development: порт для локальной разработки
    ports:
      - "${GRAFANA_PORT:-3002}:3000"
    depends_on:
      - prometheus

  otel-collector:
    image: otel/opentelemetry-collector:0.94.0
    profiles: ["obs"]
    volumes:
      - ./deploy/otel-collector.yaml:/etc/otelcol/config.yaml:ro
    restart: unless-stopped
    networks:
      - budget-network
    # Порт доступен только внутри Docker сети
    expose:
      - "4318"
    # Development: порт для локальной разработки
    ports:
      - "${OTEL_PORT:-4318}:4318"



# Сетевая конфигурация для production
networks:
  budget-network:
    driver: bridge

